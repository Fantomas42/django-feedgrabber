--- nosedjango/nosedjango.py	2009-10-06 17:29:21.000000000 +0200
+++ nosedjango/nosedjango.py	2009-09-22 17:43:24.000000000 +0200
@@ -14,7 +14,10 @@
 # search the current working directory and all parent directories to find
 # the settings file
 from nose.importer import add_path
-os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
+
+if 'DJANGO_SETTINGS_MODULE' not in os.environ:
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
+
 import re
 NT_ROOT = re.compile(r"^[a-zA-Z]:\\$")
 def get_SETTINGS_PATH():
@@ -66,20 +69,24 @@
         if not SETTINGS_PATH:
             sys.stderr.write("Can't find Django settings file!\n")
             # short circuit if no settings file can be found
-            return
+            #return
 
         if self.conf.addPaths:
             map(add_path, self.conf.where)
 
         add_path(SETTINGS_PATH)
         sys.path.append(SETTINGS_PATH)
-        import settings
+
+        # use dynamical import: we not necessary use settings.py like settings
+        # file
+        __import__(os.environ['DJANGO_SETTINGS_MODULE'])
+        settings = sys.modules[os.environ['DJANGO_SETTINGS_MODULE']]
 
         # Some Django code paths evaluate differently
         # between DEBUG and not DEBUG.  Example of this include the url
         # dispatcher when 404's are hit.  Django's own test runner forces DEBUG
         # to be off.
-        settings.DEBUG = False 
+        settings.DEBUG = False
 
         from django.core import mail
         self.mail = mail
@@ -95,7 +102,7 @@
         connection.creation.create_test_db(verbosity=self.verbosity)
 
         # exit the setup phase and let nose do it's thing
-            
+
     def beforeTest(self, test):
 
         if not SETTINGS_PATH:
@@ -104,7 +111,7 @@
 
         # This is a distinctive difference between the NoseDjango
         # test runner compared to the plain Django test runner.
-        # Django uses the standard unittest framework and resets the 
+        # Django uses the standard unittest framework and resets the
         # database between each test *suite*.  That usually resolves
         # into a test module.
         #
@@ -122,7 +129,7 @@
             hasattr(test.context, 'fixtures'):
                 # We have to use this slightly awkward syntax due to the fact
                 # that we're using *args and **kwargs together.
-                call_command('loaddata', *test.context.fixtures, **{'verbosity': 0}) 
+                call_command('loaddata', *test.context.fixtures, **{'verbosity': 0})
 
         if isinstance(test, nose.case.Test) and \
             isinstance(test.test, nose.case.MethodTestCase) and \
@@ -146,7 +153,7 @@
         from django.test.utils import teardown_test_environment
         from django.db import connection
         from django.conf import settings
-        connection.creation.destroy_test_db(self.old_db, verbosity=self.verbosity)   
+        connection.creation.destroy_test_db(self.old_db, verbosity=self.verbosity)
         teardown_test_environment()
 
         if hasattr(self, 'old_urlconf'):
